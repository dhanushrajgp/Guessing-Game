var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":"SSDSSSSSSSSSSSSLLLLLLLLLLFFLLLLLLL","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[34,"core::num::nonzero"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::mem::maybe_uninit"],[38,"core::option"],[39,"alloc::string"],[40,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[1,3],[[1,1],4],[[1,5],6],[[1,5],6],[3,1],[-1,-1,[]],[[[8,[7]]],[[9,[2,1]]]],[[[8,[[10,[7]]]]],[[9,[[8,[7]],1]]]],[-1,-2,[],[]],[1,[[12,[11]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[3,"Error",0],[15,"tuple"],[3,"NonZeroU32",34],[15,"bool"],[3,"Formatter",35],[6,"Result",35],[15,"u8"],[15,"slice"],[4,"Result",36],[19,"MaybeUninit",37],[15,"i32"],[4,"Option",38],[3,"String",39],[3,"TypeId",40]],"b":[[21,"impl-Display-for-Error"],[22,"impl-Debug-for-Error"]]},\
"guessing_game":{"doc":"","t":"F","n":["main"],"q":[[0,"guessing_game"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"ppv_lite86":{"doc":"","t":"IIIIIIIIIIQIIIIIIIIIIIIIKKOOOKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKIQIQIQIQIQIQIQIQIQIQKLLKKKLLCCCKKKAGGDDDDDDGGGDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLTTTLLLLLLLLLLLLLLL","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::marker"],[270,"core::clone"],[271,"core::marker"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,0,0,0,33,34,8,33,34,35,35,35,35,35,36,36,36,36,36,36,37,36,36,38,38,38,39,39,39,40,40,40,40,40,40,40,8,41,42,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,7,35,35,43,4,4,35,35,0,0,0,44,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,23,24,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,22,23,23,24,19,21,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,23,24,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1],[],[]],[-1,-1,[]],0,0,0,[[-1,1],-2,[],[]],[[-1,1],-2,[],[]],[-1,-2,[],[]],[[-1,-2,1],-1,[],[]],[[-1,-2,1],-1,[],[]],[[],-1,[]],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-1,-1],[[5,[-1,-1,-1,-1]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[[-1,-2],-3,[],[],[[7,[-2]]]],[[-1,-2],-3,[],[],[[7,[-2]]]],[-1,-2,[],[]],[[[3,[2]]],-1,[]],[[[3,[2]]],-1,[]],[[-1,-2],-3,[],[],[[8,[-2]]]],[[-1,-2],-3,[],[],[[8,[-2]]]],0,0,0,[-1,-2,[],[]],[[-1,[3,[2]]],5,[]],[[-1,[3,[2]]],5,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[[[19,[-1,-2,-3]]],[[19,[-1,-2,-3]]],20,20,20],[[[21,[-1]]],[[21,[-1]]],20],[22,22],[23,23],[24,24],[[],22],[[],23],[[],24],[[22,22],25],[[23,23],25],[[24,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[1]]],22],[-1,-1,[]],[[[26,[27]]],23],[-1,-1,[]],[-1,-1,[]],[[],[[19,[-1,-2,-3]]],28,28,28],[[],[[21,[-1]]],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[22]]],23],[[[26,[22]]],24],[23,[[26,[22]]]],[24,[[26,[22]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[22,22],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"u32"],[15,"u8"],[15,"slice"],[8,"StoreBytes",0],[15,"tuple"],[8,"Sized",269],[8,"Store",0],[8,"MultiLane",0],[3,"YesS3",99],[3,"NoS3",99],[3,"YesS4",99],[3,"NoS4",99],[3,"YesA1",99],[3,"NoA1",99],[3,"YesA2",99],[3,"NoA2",99],[3,"YesNI",99],[3,"NoNI",99],[3,"SseMachine",99],[8,"Clone",270],[3,"Avx2Machine",99],[19,"vec128_storage",99],[19,"vec256_storage",99],[19,"vec512_storage",99],[15,"bool"],[15,"array"],[15,"u64"],[8,"Copy",269],[4,"Result",271],[3,"TypeId",272],[8,"AndNot",0],[8,"BSwap",0],[8,"Vec2",0],[8,"Vec4",0],[8,"Machine",0],[8,"RotateEachWord32",0],[8,"RotateEachWord64",0],[8,"Words4",0],[8,"LaneWords4",0],[8,"Swap64",0],[8,"Vector",0],[8,"Vec4Ext",0],[8,"UnsafeFrom",0],[8,"VZip",0]],"b":[]},\
"rand":{"doc":"Utilities for random number generation","t":"SIDISIIQILLLALLKLLLLLLLKLLLLLLLLLLLKKAFLLALLLLLALLFLKLLKLLLLNDDEDDIINNNDDDDNDEDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLAIIIQDDDDDIQKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCAIDLLLLLLLLLLCCCCCCCCCCCDDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLQIDILLKLKLLKKLKKLLALLLLKKLLLLLEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLL","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[60,"rand::distributions"],[328,"rand::distributions::uniform"],[473,"rand::distributions::weighted"],[476,"rand::distributions::weighted::alias_method"],[488,"rand::prelude"],[499,"rand::rngs"],[560,"rand::rngs::adapter"],[608,"rand::rngs::mock"],[627,"rand::seq"],[657,"rand::seq::index"],[710,"core::num::nonzero"],[711,"core::option"],[712,"core::marker"],[713,"core::fmt"],[714,"core::fmt"],[715,"getrandom::error"],[716,"core::error"],[717,"alloc::boxed"],[718,"core::convert"],[719,"std::io::error"],[720,"alloc::string"],[721,"core::any"],[722,"core::clone"],[723,"core::cmp"],[724,"core::cmp"],[725,"core::ops::range"],[726,"core::iter::traits::collect"],[727,"core::ops::arith"],[728,"core::default"],[729,"core::num::nonzero"],[730,"core::num::nonzero"],[731,"alloc::vec"],[732,"rand_core::block"],[733,"std::io"],[734,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","Returns the argument unchanged.","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,83,0,1,1,1,0,30,30,13,1,1,1,1,1,83,83,83,30,30,30,30,30,30,30,30,1,1,1,13,13,0,0,1,13,0,30,30,30,30,83,0,1,1,0,1,5,30,30,13,1,1,1,1,42,0,0,0,0,0,0,0,35,42,42,0,0,0,0,42,0,0,0,93,32,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,36,37,32,38,40,42,43,33,34,35,36,37,32,38,40,42,43,33,34,35,40,42,43,34,35,35,27,47,36,37,32,38,40,42,42,43,33,34,35,27,47,36,37,32,38,40,42,43,43,43,33,34,34,35,27,47,36,37,32,38,40,42,43,33,27,26,26,34,38,40,27,26,34,47,36,36,37,37,32,38,40,43,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,26,26,93,93,27,34,35,36,37,32,38,40,42,43,33,35,42,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,0,40,34,35,27,47,36,37,32,38,40,42,43,33,0,0,0,0,16,0,0,0,0,0,0,94,74,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,72,70,71,72,73,70,71,72,73,70,71,72,73,17,94,43,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,94,43,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,94,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,17,94,70,70,70,70,70,70,70,70,70,70,70,70,72,72,94,70,70,70,70,70,70,70,70,70,70,70,70,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,28,80,79,80,28,79,80,28,79,80,28,80,80,79,80,28,0,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,0,0,0,81,84,86,81,84,86,81,81,81,84,81,84,86,86,81,84,86,81,84,86,81,84,81,84,81,84,81,81,86,81,86,84,81,84,86,81,84,86,81,84,86,81,84,86,81,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,95,0,0,0,88,88,95,96,95,96,96,95,95,96,95,95,88,88,0,88,88,88,88,95,95,88,88,88,88,88,0,0,0,90,92,91,90,92,91,90,91,90,91,90,90,92,91,90,90,90,92,91,90,90,92,91,90,92,91,90,90,90,90,92,91,0,0,92,91,90,91,90,92,91,90,92,91,90,92,91,90,92,91],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],0,[[-1,-2],4,[],[5,6]],[[-1,-2],4,[],[5,6]],[[-1,[8,[7]]],4,[]],[[1,9],[[11,[4,10]]]],[[1,9],[[11,[4,10]]]],[-1,-1,[]],[12,1],[2,1],[[],-1,[]],[-1,[[11,[-2,1]]],13,[]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,14],15,[]],[[-1,14],15,[]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,18,18],15,[]],[[-1,18,18],15,[]],[1,19],[-1,-2,[],[]],[-1,1,[[21,[[20,[19]]]]]],[-1,18,[]],[-1,22,[]],0,[[],-1,[]],[1,[[3,[23]]]],[[13,[8,[7]]],[[11,[24,25]]]],0,[[-1,-3],-2,[],[],[[26,[-2]]]],[[-1,-3],-2,[],[],[[26,[-2]]]],[[-1,-3],[[27,[-3,-1,-2]]],6,[],[[26,[-2]]]],[[-1,-3],[[27,[-3,-1,-2]]],6,[],[[26,[-2]]]],[22,-1,[]],0,[1,[[3,[19]]]],[1,[[20,[19]]]],[[],28],[-1,29,[]],[[-1,-2],[[11,[4,1]]],[],[30,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,[8,[7]]],[[11,[4,1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,29,24],4,[],[30,6]],[[32,-1,29,24],4,[30,6]],[[33,-1,29,24],4,[30,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[35,35],[36,36],[37,37],[32,32],[[[38,[-1]]],[[38,[-1]]],39],[[[40,[-1]]],[[40,[-1]]],[39,16,41]],[42,42],[[[43,[-1]]],[[43,[-1]]],[39,16]],[33,33],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[34,34],15],[[35,35],15],[[[40,[-1]],[40,[-1]]],15,[44,16,41]],[[42,42],15],[[[43,[-1]],[43,[-1]]],15,[44,16]],[[34,9],45],[[35,9],45],[[35,9],45],[[[27,[-1,-2,-3]],9],45,46,46,46],[[[47,[-1,-2,-3,-4]],9],45,46,46,46,46],[[36,9],45],[[37,9],45],[[32,9],45],[[[38,[-1]],9],45,46],[[[40,[-1]],9],45,[46,16,41]],[[42,9],45],[[42,9],45],[[[43,[-1]],9],45,[46,16]],[[33,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]]],[[43,[-1]]],16],[[[49,[-1]]],[[43,[-1]]],16],[-1,-1,[]],[[18,18],[[11,[34,35]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[47,[-1,-2,-3,-4]]],6,50,[],[]],[[-1,-2],[[47,[-1,-2,-3,-4]]],6,50,[],[]],[14,[[11,[34,35]]]],[[[8,[-1]]],[[11,[[38,[-1]],0]]],[]],[-1,[[11,[[40,[-2]],42]]],51,[52,39,53,16,41]],[[[27,[-2,-3,-1]]],[[3,[-1]]],[],[[26,[-1]]],30],[[-1,-2],-3,[],[30,6],[]],[[34,-1],15,[30,6]],[[[47,[-2,-3,-1,-4]],-5],-4,[],[[26,[-1]]],50,[],[30,6]],[[36,-1],14,[30,6]],[[36,-1],54,[30,6]],[[37,-1],14,[30,6]],[[37,-1],54,[30,6]],[[32,-1],7,[30,6]],[[[38,[-1]],-2],-1,[],[30,6]],[[[40,[-1]],-2],24,[16,41],[30,6]],[[[43,[-1]],-2],-1,16,[30,6]],[[33,-1],7,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[3,[-2]]],[30,6],[]],[[33,-1],56,[30,6]],[[33,-1],[[4,[-2,-3,-4]]],[30,6],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],57,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],58,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],54,[30,6]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[30,6],[],[],[],[],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7]]],[30,6],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6]]],[30,6],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[30,6],[],[],[],[],[],[],[],[],[]],[[33,-1],59,[30,6]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9]]],[30,6],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],24,[30,6]],[[33,-1],60,[30,6]],[[33,-1],[[61,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],62,[30,6]],[[33,-1],23,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8]]],[30,6],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],63,[30,6]],[[33,-1],64,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],4,[30,6]],[[33,-1],2,[30,6]],[[33,-1],[[4,[-2,-3]]],[30,6],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2]]],[30,6],[]],[[33,-1],15,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[30,6],[],[],[],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[30,6],[],[],[],[],[],[],[],[],[],[]],[[33,-1],14,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5]]],[30,6],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],65,[30,6]],[[33,-1],18,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],66,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],67,[30,6]],[[33,-1],68,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],69,[30,6]],[[33,-1],22,[30,6]],[[-1,-2],[[27,[-1,-2,-3]]],6,30,[]],[[-1,-2],[[27,[-1,-2,-3]]],6,30,[]],[[-1,-2,24],29,[],[30,6]],[[-1,-2,24],29,[],[30,6]],[[[27,[-2,-3,-1]]],[[4,[24,[3,[24]]]]],[],[[26,[-1]]],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,[[[40,[-1]],[8,[[4,[24,-1]]]]],[[11,[4,42]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]]],[[70,[-1]]],39],[71,71],[[[72,[-1]]],[[72,[-1]]],39],[73,73],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[70,[-1]],[70,[-1]]],15,44],[[[72,[-1]],[72,[-1]]],15,44],[[[70,[-1]],9],45,46],[[71,9],45],[[[72,[-1]],9],45,46],[[73,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[[-1,-2],-3,[74,6],[74,6],[]],[[-2,-3],[[43,[-1]]],16,[[74,[-1]],6],[[74,[-1]],6]],[[-1,-2],[[70,[62]]],[74,6],[74,6]],[[-1,-2],[[70,[57]]],[74,6],[74,6]],[[-1,-2],[[70,[18]]],[74,6],[74,6]],[[-1,-2],[[70,[22]]],[74,6],[74,6]],[[-1,-2],[[70,[69]]],[74,6],[74,6]],[[-1,-2],[[70,[63]]],[74,6],[74,6]],[[-1,-2],[[70,[68]]],[74,6],[74,6]],[[-1,-2],[[70,[23]]],[74,6],[74,6]],[[-1,-2],[[70,[67]]],[74,6],[74,6]],[[-1,-2],[[70,[7]]],[74,6],[74,6]],[[-1,-2],[[70,[24]]],[74,6],[74,6]],[[-1,-2],[[70,[56]]],[74,6],[74,6]],[[-1,-2],71,[74,6],[74,6]],[[-1,-2],[[72,[14]]],[74,6],[74,6]],[[-1,-2],[[72,[54]]],[74,6],[74,6]],[[-1,-2],73,[74,6],[74,6]],[[-1,-2],-3,[74,6],[74,6],[]],[[-2,-3],[[43,[-1]]],16,[[74,[-1]],6],[[74,[-1]],6]],[[-1,-2],[[70,[23]]],[74,6],[74,6]],[[-1,-2],[[70,[62]]],[74,6],[74,6]],[[-1,-2],[[70,[57]]],[74,6],[74,6]],[[-1,-2],[[70,[63]]],[74,6],[74,6]],[[-1,-2],[[70,[24]]],[74,6],[74,6]],[[-1,-2],[[70,[69]]],[74,6],[74,6]],[[-1,-2],[[70,[68]]],[74,6],[74,6]],[[-1,-2],[[70,[18]]],[74,6],[74,6]],[[-1,-2],[[70,[22]]],[74,6],[74,6]],[[-1,-2],[[70,[7]]],[74,6],[74,6]],[[-1,-2],[[70,[56]]],[74,6],[74,6]],[[-1,-2],[[70,[67]]],[74,6],[74,6]],[[-1,-2],71,[74,6],[74,6]],[[-1,-2],[[72,[14]]],[74,6],[74,6]],[[-1,-2],[[72,[54]]],[74,6],[74,6]],[[-1,-2],73,[74,6],[74,6]],[[-1,-2],[],[],[30,6]],[[[70,[23]],-1],[],[30,6]],[[[70,[57]],-1],[],[30,6]],[[[70,[24]],-1],[],[30,6]],[[[70,[68]],-1],[],[30,6]],[[[70,[62]],-1],[],[30,6]],[[[70,[22]],-1],[],[30,6]],[[[70,[67]],-1],[],[30,6]],[[[70,[18]],-1],[],[30,6]],[[[70,[63]],-1],[],[30,6]],[[[70,[7]],-1],[],[30,6]],[[[70,[69]],-1],[],[30,6]],[[[70,[56]],-1],[],[30,6]],[[71,-1],[],[30,6]],[[[72,[14]],-1],[],[30,6]],[[[72,[54]],-1],[],[30,6]],[[73,-1],75,[30,6]],[[-1,-2],-3,[],[13,6],[]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]],9],45,[46,77]],[-1,-1,[]],[-1,-2,[],[]],[[[78,[-1]]],[[11,[[76,[-1]],42]]],77],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[80,80],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],79],[[],28],[[80,80],15],[[79,[8,[7]]],4],[[80,[8,[7]]],4],[[28,[8,[7]]],4],[[79,9],[[11,[4,10]]]],[[80,9],45],[[28,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[80,1]]],13],[[],80],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[79,18],[80,18],[28,18],[79,22],[80,22],[28,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,[8,[7]]],[[11,[4,1]]]],[[80,[8,[7]]],[[11,[4,1]]]],[[28,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1,-2]]],[[81,[-1,-2]]],[82,83,39],[13,39]],[[-1,-2],4,[],[]],[[[84,[-1]],[8,[7]]],4,85],[[[81,[-1,-2]],[8,[7]]],4,[82,83],13],[[[84,[-1]],9],45,46],[[86,9],45],[[86,9],45],[[[81,[-1,-2]],9],45,[82,83,46],[13,46]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-1]]],85],[[-1,22,-2],[[81,[-1,-2]]],[82,83],13],[[[84,[-1]]],18,85],[[[81,[-1,-2]]],18,[82,83],13],[[[84,[-1]]],22,85],[[[81,[-1,-2]]],22,[82,83],13],[[[81,[-1,-2]]],[[11,[4,1]]],[82,83],13],[86,[[3,[19]]]],[-1,-2,[],[]],[-1,29,[]],[[[84,[-1]],[8,[7]]],[[11,[4,1]]],85],[[[81,[-1,-2]],[8,[7]]],[[11,[4,1]]],[82,83],13],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[87,87],[[-1,-2],4,[],[]],[[87,87],15],[[87,[8,[7]]],4],[[87,9],45],[-1,-1,[]],[-1,-2,[],[]],[[22,22],87],[87,18],[87,22],[-1,-2,[],[]],[[87,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],3,[],[30,6]],[[-1,-2],3,[],[30,6]],[[-1,-2,24],[[88,[-1]]],[],[30,6]],[[-1,-2,24],78,[],[30,6]],[[-1,-2,8],24,[],[30,6]],[[-1,-2,24,-3],[[11,[[88,[-1]],42]]],[],[30,6],50],[[-1,-2],3,[],[30,6]],[[-1,-2],3,[],[30,6]],[[-1,-2,-3],[[11,[42]]],[],[30,6],50],[[-1,-2,-3],[[11,[42]]],[],[30,6],50],[[[88,[-1,-2]],9],45,[46,6],46],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1,-2]]],24,[[89,[24]],6],[]],[[[88,[-1,-2]]],3,[[89,[24]],6],[]],[[-1,-2,24],[[4,[8,8]]],[],[30,6]],[[-1,-2],4,[],[30,6]],[[[88,[-1,-2]]],[[4,[24,[3,[24]]]]],[[89,[24]],6],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,90],[91,91],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[90,90],15],[[90,9],45],[[92,9],45],[[91,9],45],[[[78,[18]]],90],[-1,-1,[]],[[[78,[24]]],90],[-1,-1,[]],[-1,-1,[]],[[90,24],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,91],[-1,-2,[],[]],[-1,-2,[],[]],[90,[[78,[24]]]],[90,15],[90,92],[90,24],[92,[[3,[24]]]],[91,3],[[-1,24,24],90,[30,6]],[[-1,24,-2,24],[[11,[90,42]]],[30,6],50],[92,[[4,[24,[3,[24]]]]]],[91,[[4,[24,[3,[24]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[327,473,474,475,476,477,480,483,560,561],"p":[[3,"Error",0],[3,"NonZeroU32",710],[4,"Option",711],[15,"tuple"],[8,"Fill",0],[8,"Sized",712],[15,"u8"],[15,"slice"],[3,"Formatter",713],[3,"Error",713],[4,"Result",714],[3,"Error",715],[8,"RngCore",0],[15,"f64"],[15,"bool"],[8,"SampleUniform",328],[8,"SampleRange",328],[15,"u32"],[8,"Error",716],[3,"Box",717],[8,"Into",718],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",719],[8,"Distribution",60],[3,"DistIter",60],[3,"ThreadRng",499],[3,"String",720],[8,"Rng",0],[3,"TypeId",721],[3,"Alphanumeric",60],[3,"Standard",60],[3,"Bernoulli",60],[4,"BernoulliError",60],[3,"OpenClosed01",60],[3,"Open01",60],[3,"Slice",60],[8,"Clone",722],[3,"WeightedIndex",60],[8,"PartialOrd",723],[4,"WeightedError",60],[3,"Uniform",60],[8,"PartialEq",723],[6,"Result",713],[8,"Debug",713],[3,"DistMap",60],[3,"RangeInclusive",724],[3,"Range",724],[8,"Fn",725],[8,"IntoIterator",726],[8,"AddAssign",727],[8,"Default",728],[15,"f32"],[15,"array"],[15,"isize"],[15,"i128"],[3,"NonZeroU128",710],[3,"NonZeroU16",710],[3,"NonZeroU8",710],[3,"Wrapping",729],[15,"i8"],[15,"i64"],[15,"char"],[3,"NonZeroU64",710],[3,"NonZeroUsize",710],[15,"u16"],[15,"u128"],[15,"i16"],[3,"UniformInt",328],[3,"UniformChar",328],[3,"UniformFloat",328],[3,"UniformDuration",328],[8,"SampleBorrow",328],[3,"Duration",730],[3,"WeightedIndex",476],[8,"Weight",476],[3,"Vec",731],[3,"OsRng",499],[3,"StdRng",499],[3,"ReseedingRng",560],[8,"BlockRngCore",732],[8,"SeedableRng",0],[3,"ReadRng",560],[8,"Read",733],[3,"ReadError",560],[3,"StepRng",608],[3,"SliceChooseIter",627],[8,"Index",734],[4,"IndexVec",657],[4,"IndexVecIntoIter",657],[4,"IndexVecIter",657],[8,"DistString",60],[8,"UniformSampler",328],[8,"SliceRandom",627],[8,"IteratorRandom",627]],"b":[[16,"impl-Debug-for-Error"],[17,"impl-Display-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[20,"impl-From%3CNonZeroU32%3E-for-Error"],[132,"impl-Debug-for-BernoulliError"],[133,"impl-Display-for-BernoulliError"],[141,"impl-Debug-for-WeightedError"],[142,"impl-Display-for-WeightedError"],[156,"impl-From%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[157,"impl-From%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[182,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[183,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[184,"impl-Distribution%3Cf64%3E-for-Open01"],[185,"impl-Distribution%3Cf32%3E-for-Open01"],[190,"impl-Distribution%3Cu8%3E-for-Standard"],[191,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[192,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[193,"impl-Distribution%3Cisize%3E-for-Standard"],[194,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[195,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[196,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[197,"impl-Distribution%3Ci128%3E-for-Standard"],[198,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[199,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[200,"impl-Distribution%3CNonZeroU128%3E-for-Standard"],[201,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[202,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[203,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[204,"impl-Distribution%3Cf32%3E-for-Standard"],[205,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[206,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[207,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[208,"impl-Distribution%3C%5BT;+32%5D%3E-for-Standard"],[209,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[210,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[211,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[212,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[213,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[214,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[215,"impl-Distribution%3CNonZeroU16%3E-for-Standard"],[216,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[217,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[218,"impl-Distribution%3Cusize%3E-for-Standard"],[219,"impl-Distribution%3CNonZeroU8%3E-for-Standard"],[220,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[221,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[222,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[223,"impl-Distribution%3Ci8%3E-for-Standard"],[224,"impl-Distribution%3Ci32%3E-for-Standard"],[225,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[226,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[227,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[228,"impl-Distribution%3Ci64%3E-for-Standard"],[229,"impl-Distribution%3Cchar%3E-for-Standard"],[230,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[231,"impl-Distribution%3C()%3E-for-Standard"],[232,"impl-Distribution%3CNonZeroU32%3E-for-Standard"],[233,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[234,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[235,"impl-Distribution%3C(A,)%3E-for-Standard"],[236,"impl-Distribution%3Cbool%3E-for-Standard"],[237,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[238,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[239,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[240,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[241,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[242,"impl-Distribution%3Cf64%3E-for-Standard"],[243,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[244,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[245,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[246,"impl-Distribution%3CNonZeroU64%3E-for-Standard"],[247,"impl-Distribution%3Cu32%3E-for-Standard"],[248,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[249,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[250,"impl-Distribution%3CNonZeroUsize%3E-for-Standard"],[251,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[252,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[253,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[254,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[255,"impl-Distribution%3Cu16%3E-for-Standard"],[256,"impl-Distribution%3Cu128%3E-for-Standard"],[257,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[258,"impl-Distribution%3Ci16%3E-for-Standard"],[259,"impl-Distribution%3Cu64%3E-for-Standard"],[373,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[374,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[375,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[376,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[377,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[378,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[379,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[380,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[381,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[382,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[383,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[384,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[386,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[387,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[391,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[392,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[393,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[394,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[395,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[396,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[397,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[398,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[399,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[400,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[401,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[402,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[404,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[405,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[408,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[409,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[410,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[411,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[412,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[413,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[414,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[415,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[416,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[417,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[418,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[419,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[421,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[422,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[426,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[427,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[428,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[429,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[430,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[431,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[432,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[433,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[434,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[435,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[436,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[437,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[438,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[439,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[441,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[442,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[443,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[444,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[445,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[446,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[447,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[448,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[449,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[450,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[451,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[452,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[575,"impl-Display-for-ReadError"],[576,"impl-Debug-for-ReadError"],[674,"impl-From%3CVec%3Cu32%3E%3E-for-IndexVec"],[676,"impl-From%3CVec%3Cusize%3E%3E-for-IndexVec"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":"DDDDDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[129,"rand_core"],[130,"core::fmt"],[131,"core::fmt"],[132,"core::result"],[133,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[6,6],9],[[7,7],9],[[3,[11,[10]]],8],[[5,[11,[10]]],8],[[7,[11,[10]]],8],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[-1,-1,[]],[4,5],[-1,-1,[]],[6,7],[-1,-1,[]],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[2,8],[4,8],[6,8],[3,[[14,[10]]]],[5,[[14,[10]]]],[7,[[14,[10]]]],[3,15],[5,15],[7,15],[3,16],[5,16],[7,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,17],[5,17],[7,17],[3,15],[5,15],[7,15],0,[[3,15],8],[[5,15],8],[[7,15],8],[[3,16],8],[[5,16],8],[[7,16],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,[11,[10]]],[[19,[8,18]]]],[[5,[11,[10]]],[[19,[8,18]]]],[[7,[11,[10]]],[[19,[8,18]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"RngCore",129],[3,"ChaCha20Core",0],[3,"ChaCha20Rng",0],[3,"ChaCha12Core",0],[3,"ChaCha12Rng",0],[3,"ChaCha8Core",0],[3,"ChaCha8Rng",0],[15,"tuple"],[15,"bool"],[15,"u8"],[15,"slice"],[3,"Formatter",130],[6,"Result",130],[15,"array"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error",131],[4,"Result",132],[3,"TypeId",133]],"b":[]},\
"rand_core":{"doc":"Random number generation traits","t":"SIIDSDIQIKLALLLLLLLLKLLLLLLLLLLKALLLALKLKLLLLLLLLKLLLLLLLDDIQQLLLLLLLLLMMLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFF","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[57,"rand_core::block"],[110,"rand_core::impls"],[116,"rand_core::le"],[118,"core::num::nonzero"],[119,"core::option"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::result"],[123,"core::error"],[124,"alloc::boxed"],[125,"core::convert"],[126,"std::io::error"],[127,"alloc::string"],[128,"core::any"],[129,"core::clone"],[130,"core::marker"],[131,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[4,0,0,0,4,0,0,29,0,30,2,0,4,2,4,2,2,2,4,2,1,2,4,4,2,4,4,4,2,29,29,29,0,4,4,2,0,4,1,2,1,2,4,1,29,4,4,2,4,1,2,4,2,4,2,4,2,0,0,0,25,25,23,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,25,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[4,[[6,[5]]]],[[],2],[[-1,[8,[7]]],3,[]],[[2,[8,[7]]],3],[[4,9],10],[[4,9],10],[[2,9],10],[-1,-1,[]],[5,4],[11,4],[-1,-1,[]],[[],-1,[]],[-1,[[12,[-2,4]]],1,[]],[[],-1,[]],0,[4,13],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,4,[[15,[[14,[13]]]]]],[-1,16,[]],[2,16],[-1,17,[]],[2,17],[4,[[6,[18]]]],[[1,[8,[7]]],[[12,[19,20]]]],[17,-1,[]],[4,[[6,[13]]]],[4,[[14,[13]]]],[-1,-2,[],[]],[-1,21,[]],[[-1,[8,[7]]],[[12,[3,4]]],[]],[[2,[8,[7]]],[[12,[3,4]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[-1]]],[24,25,26]],[[[27,[-1]]],[[27,[-1]]],[24,25,26]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[23,[-1]],[8,[7]]],3,25],[[[27,[-1]],[8,[7]]],3,25],[[[23,[-1]],9],10,[25,28]],[[[27,[-1]],9],10,[25,28]],[-1,-1,[]],[-1,-1,[]],[-1,[[12,[[23,[-2]],4]]],1,[25,29]],[-1,[[12,[[27,[-2]],4]]],1,[25,29]],[[],[[23,[-1]]],[25,29]],[[],[[27,[-1]]],[25,29]],[-1,3,[]],[[[23,[-1]],19],3,25],[[[27,[-1]],19],3,25],[[[23,[-1]]],19,25],[[[27,[-1]]],19,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-1]]],25],[-1,[[27,[-1]]],25],[[[23,[-1]]],16,25],[[[27,[-1]]],16,25],[[[23,[-1]]],17,25],[[[27,[-1]]],17,25],[[[23,[-1]]],3,25],[[[27,[-1]]],3,25],[17,[[23,[-1]]],[25,29]],[17,[[27,[-1]]],[25,29]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]],[8,[7]]],[[12,[3,4]]],25],[[[27,[-1]],[8,[7]]],[[12,[3,4]]],25],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[-1,[8,[7]]],3,[1,26]],[[[8,[16]],[8,[7]]],[[3,[19,19]]]],[[[8,[17]],[8,[7]]],[[3,[19,19]]]],[-1,16,[1,26]],[-1,17,[1,26]],[-1,17,[1,26]],[[[8,[7]],[8,[16]]],3],[[[8,[7]],[8,[17]]],3]],"c":[],"p":[[8,"RngCore",0],[3,"OsRng",0],[15,"tuple"],[3,"Error",0],[3,"NonZeroU32",118],[4,"Option",119],[15,"u8"],[15,"slice"],[3,"Formatter",120],[6,"Result",120],[3,"Error",121],[4,"Result",122],[8,"Error",123],[3,"Box",124],[8,"Into",125],[15,"u32"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",126],[3,"String",127],[3,"TypeId",128],[3,"BlockRng",57],[8,"Clone",129],[8,"BlockRngCore",57],[8,"Sized",130],[3,"BlockRng64",57],[8,"Debug",120],[8,"SeedableRng",0],[8,"CryptoRngCore",0]],"b":[[22,"impl-Display-for-Error"],[23,"impl-Debug-for-Error"],[26,"impl-From%3CNonZeroU32%3E-for-Error"],[27,"impl-From%3CError%3E-for-Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
